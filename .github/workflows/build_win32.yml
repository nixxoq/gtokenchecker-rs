name: CI/CD

on:
  push:
    branches:
      - '*'

env:
  BINARY_NAME: gtokenchecker-rs
  BUILD_WINDOWS: 1
  BUILD_LINUX: 1

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            rust: stable
            build_os: windows
            arch: x64
          - target: i686-pc-windows-gnu
            os: windows-latest
            rust: stable
            build_os: windows
            arch: x86
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            rust: stable
            build_os: linux
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          components: rustfmt
          override: true

      - name: Install MinGW-w64 toolchain
        if: matrix.build_os == 'windows'
        run: |
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends mingw-w64

      - name: Determine build type
        id: build_type
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "build_mode=release" >> $GITHUB_OUTPUT
          else
            echo "build_mode=debug" >> $GITHUB_OUTPUT
          fi

      - name: Build project (${{ matrix.build_os }} - ${{ matrix.arch }})
        if: |
          (matrix.build_os == 'windows' && env.BUILD_WINDOWS == '1') ||
          (matrix.build_os == 'linux' && env.BUILD_LINUX == '1')
        run: cargo build ${{ steps.build_type.outputs.build_mode == 'release' && '--release' || '' }} --target ${{ matrix.target }}

      - name: Create artifacts directory
        shell: bash
        run: mkdir -p artifacts

      - name: Copy binary to artifacts (${{ matrix.build_os }} - ${{ matrix.arch }})
        if: |
          (matrix.build_os == 'windows' && env.BUILD_WINDOWS == '1') ||
          (matrix.build_os == 'linux' && env.BUILD_LINUX == '1')
        shell: bash
        run: |
          BUILD_MODE="${{ steps.build_type.outputs.build_mode }}"
          if [[ "${{ matrix.build_os }}" == "windows" ]]; then
            cp target/${{ matrix.target }}/${BUILD_MODE}/${{ env.BINARY_NAME }}.exe artifacts/${{ env.BINARY_NAME }}-${{ matrix.target }}.exe
          else
            cp target/${{ matrix.target }}/${BUILD_MODE}/${{ env.BINARY_NAME }} artifacts/${{ env.BINARY_NAME }}-${{ matrix.target }}
          fi

      - name: Upload artifacts (${{ steps.build_type.outputs.build_mode }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.build_os }}-${{ matrix.arch }}-${{ steps.build_type.outputs.build_mode }}
          path: artifacts
          if-no-files-found: ignore

  check_version:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check_version.outputs.should_release }}
      current_version: ${{ steps.get_version.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | sed -E 's/^version = "(.*)"/\1/')
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get latest release tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Check if version has changed
        id: check_version
        run: |
            CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed -E 's/^version = "(.*)"/\1/')
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
  
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
  
            SHOULD_RELEASE="false"
  
            if [[ -n "$LATEST_TAG" ]]; then
              LATEST_VERSION="${LATEST_TAG#v}"
              if [[ "$CURRENT_VERSION" != "$LATEST_VERSION" ]]; then
                SHOULD_RELEASE="true"
              fi
            else
              SHOULD_RELEASE="true"
            fi
            echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
            echo "version_changed=$SHOULD_RELEASE" >> $GITHUB_OUTPUT

  release:
    name: Release
    needs: [build, check_version]
    if: needs.check_version.outputs.should_release == 'true' && github.ref_name == 'main'
    permissions:
        contents: write
        pull-requests: write

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            rust: stable
            build_os: windows
            arch: x64
          - target: i686-pc-windows-gnu
            os: windows-latest
            rust: stable
            build_os: windows
            arch: x86
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            rust: stable
            build_os: linux
            arch: x64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          components: rustfmt
          override: true

      - name: Install MinGW-w64 toolchain
        if: matrix.build_os == 'windows'
        run: |
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends mingw-w64

      - name: Build Release Binaries (${{ matrix.build_os }} - ${{ matrix.arch }})
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create artifacts directory
        shell: bash
        run: mkdir -p release-package

      - name: Copy release binary to package (${{ matrix.build_os }} - ${{ matrix.arch }})
        shell: bash
        run: |
          BUILD_MODE="release"
          if [[ "${{ matrix.build_os }}" == "windows" ]]; then
            cp target/${{ matrix.target }}/${BUILD_MODE}/${{ env.BINARY_NAME }}.exe release-package/${{ env.BINARY_NAME }}-${{ matrix.target }}.exe
          else
            cp target/${{ matrix.target }}/${BUILD_MODE}/${{ env.BINARY_NAME }} release-package/${{ env.BINARY_NAME }}-${{ matrix.target }}
          fi

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.build_os }}-${{ matrix.arch }}-release
          path: release-package
          if-no-files-found: ignore

      - name: Create Release Notes
        id: release_notes
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release v${{ needs.check_version.outputs.current_version }}

      - name: Upload Release Assets to GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TAG: v${{ needs.check_version.outputs.current_version }}
        with:
          name: Release v${{ needs.check_version.outputs.current_version }}
          body: ${{ steps.release_notes.outputs.body }}
          files: release-package/**/*